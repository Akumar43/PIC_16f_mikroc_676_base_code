;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 3/5/2017 8:28:02 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28C4      	GOTO       196
_Interrupt:
0x0004	0x00DF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00A5      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00A6      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0850      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;interrupt.c,28 :: 		void Interrupt(){
;interrupt.c,29 :: 		if (TMR0IF_bit){
0x000D	0x1D0B      	BTFSS      TMR0IF_bit, BitPos(TMR0IF_bit+0)
0x000E	0x2814      	GOTO       L_Interrupt0
;interrupt.c,30 :: 		TMR0IF_bit         = 0;
0x000F	0x1283      	BCF        STATUS, 5
0x0010	0x110B      	BCF        TMR0IF_bit, BitPos(TMR0IF_bit+0)
;interrupt.c,31 :: 		TMR0                 = 6;
0x0011	0x3006      	MOVLW      6
0x0012	0x0081      	MOVWF      TMR0
;interrupt.c,32 :: 		PORTC=~PORTC;
0x0013	0x0987      	COMF       PORTC, 1
;interrupt.c,33 :: 		}
L_Interrupt0:
0x0014	0x1283      	BCF        STATUS, 5
;interrupt.c,35 :: 		if (TMR1IF_bit){
0x0015	0x1C0C      	BTFSS      TMR1IF_bit, BitPos(TMR1IF_bit+0)
0x0016	0x2848      	GOTO       L_Interrupt1
;interrupt.c,36 :: 		TMR1IF_bit = 0;
0x0017	0x100C      	BCF        TMR1IF_bit, BitPos(TMR1IF_bit+0)
;interrupt.c,37 :: 		TMR1H	 = 0xFC;
0x0018	0x30FC      	MOVLW      252
0x0019	0x008F      	MOVWF      TMR1H
;interrupt.c,38 :: 		TMR1L	 = 0x18;
0x001A	0x3018      	MOVLW      24
0x001B	0x008E      	MOVWF      TMR1L
;interrupt.c,39 :: 		i=i++;
0x001C	0x0AA3      	INCF       _i, 1
0x001D	0x1903      	BTFSC      STATUS, 2
0x001E	0x0AA4      	INCF       _i+1, 1
;interrupt.c,40 :: 		if(i<pulse_width)
0x001F	0x3080      	MOVLW      128
0x0020	0x0624      	XORWF      _i+1, 0
0x0021	0x00D0      	MOVWF      R0
0x0022	0x3080      	MOVLW      128
0x0023	0x0622      	XORWF      _pulse_width+1, 0
0x0024	0x0250      	SUBWF      R0, 0
0x0025	0x1D03      	BTFSS      STATUS, 2
0x0026	0x2829      	GOTO       L__Interrupt13
0x0027	0x0821      	MOVF       _pulse_width, 0
0x0028	0x0223      	SUBWF      _i, 0
L__Interrupt13:
0x0029	0x1803      	BTFSC      STATUS, 0
0x002A	0x282D      	GOTO       L_Interrupt2
;interrupt.c,41 :: 		PORTA |= 1 << 2;  //setting a bit
0x002B	0x1505      	BSF        PORTA, 2
0x002C	0x2848      	GOTO       L_Interrupt3
L_Interrupt2:
;interrupt.c,43 :: 		else if((i>=pulse_width) && (i< 255))
0x002D	0x3080      	MOVLW      128
0x002E	0x0624      	XORWF      _i+1, 0
0x002F	0x00D0      	MOVWF      R0
0x0030	0x3080      	MOVLW      128
0x0031	0x0622      	XORWF      _pulse_width+1, 0
0x0032	0x0250      	SUBWF      R0, 0
0x0033	0x1D03      	BTFSS      STATUS, 2
0x0034	0x2837      	GOTO       L__Interrupt14
0x0035	0x0821      	MOVF       _pulse_width, 0
0x0036	0x0223      	SUBWF      _i, 0
L__Interrupt14:
0x0037	0x1C03      	BTFSS      STATUS, 0
0x0038	0x2846      	GOTO       L_Interrupt6
0x0039	0x3080      	MOVLW      128
0x003A	0x0624      	XORWF      _i+1, 0
0x003B	0x00D0      	MOVWF      R0
0x003C	0x3080      	MOVLW      128
0x003D	0x0250      	SUBWF      R0, 0
0x003E	0x1D03      	BTFSS      STATUS, 2
0x003F	0x2842      	GOTO       L__Interrupt15
0x0040	0x30FF      	MOVLW      255
0x0041	0x0223      	SUBWF      _i, 0
L__Interrupt15:
0x0042	0x1803      	BTFSC      STATUS, 0
0x0043	0x2846      	GOTO       L_Interrupt6
L__Interrupt8:
;interrupt.c,44 :: 		PORTA &= ~(1 << 2);
0x0044	0x1105      	BCF        PORTA, 2
0x0045	0x2848      	GOTO       L_Interrupt7
L_Interrupt6:
;interrupt.c,47 :: 		i=0;
0x0046	0x01A3      	CLRF       _i
0x0047	0x01A4      	CLRF       _i+1
L_Interrupt7:
L_Interrupt3:
;interrupt.c,48 :: 		}
L_Interrupt1:
;interrupt.c,50 :: 		}
L_end_Interrupt:
L__Interrupt12:
0x0048	0x0820      	MOVF       32, 0
0x0049	0x00D0      	MOVWF      R0
0x004A	0x0826      	MOVF       ___savePCLATH, 0
0x004B	0x008A      	MOVWF      PCLATH
0x004C	0x0E25      	SWAPF      ___saveSTATUS, 0
0x004D	0x0083      	MOVWF      STATUS
0x004E	0x0EDF      	SWAPF      R15, 1
0x004F	0x0E5F      	SWAPF      R15, 0
0x0050	0x0009      	RETFIE
; end of _Interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0051	0x1283      	BCF        STATUS, 5
0x0052	0x082B      	MOVF       ___DoICPAddr+1, 0
0x0053	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0054	0x082A      	MOVF       ___DoICPAddr, 0
0x0055	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0056	0x0008      	RETURN
; end of _____DoICP
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x0057	0x300E      	MOVLW      14
0x0058	0x1283      	BCF        STATUS, 5
0x0059	0x00DD      	MOVWF      R13
L_Delay_22us1:
0x005A	0x0BDD      	DECFSZ     R13, 1
0x005B	0x285A      	GOTO       L_Delay_22us1
0x005C	0x0000      	NOP
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x005D	0x0008      	RETURN
; end of _Delay_22us
_InitTimer1:
;interrupt.c,16 :: 		void InitTimer1(){
;interrupt.c,17 :: 		T1CON	 = 0x01;
0x005E	0x3001      	MOVLW      1
0x005F	0x1283      	BCF        STATUS, 5
0x0060	0x0090      	MOVWF      T1CON
;interrupt.c,18 :: 		TMR1IF_bit	 = 0;
0x0061	0x100C      	BCF        TMR1IF_bit, BitPos(TMR1IF_bit+0)
;interrupt.c,19 :: 		TMR1H	 = 0xFC;
0x0062	0x30FC      	MOVLW      252
0x0063	0x008F      	MOVWF      TMR1H
;interrupt.c,20 :: 		TMR1L	 = 0x18;
0x0064	0x3018      	MOVLW      24
0x0065	0x008E      	MOVWF      TMR1L
;interrupt.c,21 :: 		TMR1IE_bit	 = 1;
0x0066	0x1683      	BSF        STATUS, 5
0x0067	0x140C      	BSF        TMR1IE_bit, BitPos(TMR1IE_bit+0)
;interrupt.c,22 :: 		INTCON	 = 0xC0;
0x0068	0x30C0      	MOVLW      192
0x0069	0x008B      	MOVWF      INTCON
;interrupt.c,23 :: 		TMR1ON_bit =1;                             // need to be added in extra... doesnt generate from timer generator
0x006A	0x1283      	BCF        STATUS, 5
0x006B	0x1410      	BSF        TMR1ON_bit, BitPos(TMR1ON_bit+0)
;interrupt.c,24 :: 		}
L_end_InitTimer1:
0x006C	0x0008      	RETURN
; end of _InitTimer1
_InitTimer0:
;interrupt.c,5 :: 		void InitTimer0(){
;interrupt.c,6 :: 		OPTION_REG         = 0x82;
0x006D	0x3082      	MOVLW      130
0x006E	0x1683      	BSF        STATUS, 5
0x006F	0x0081      	MOVWF      OPTION_REG
;interrupt.c,7 :: 		TMR0                 = 6;
0x0070	0x3006      	MOVLW      6
0x0071	0x1283      	BCF        STATUS, 5
0x0072	0x0081      	MOVWF      TMR0
;interrupt.c,8 :: 		INTCON         = 0xA0;
0x0073	0x30A0      	MOVLW      160
0x0074	0x008B      	MOVWF      INTCON
;interrupt.c,9 :: 		}
L_end_InitTimer0:
0x0075	0x0008      	RETURN
; end of _InitTimer0
_port_init:
;board.c,2 :: 		void port_init(void)
;board.c,4 :: 		TRISC=0x00;
0x0076	0x1683      	BSF        STATUS, 5
0x0077	0x0187      	CLRF       TRISC
;board.c,5 :: 		TRISA=0x00;
0x0078	0x0185      	CLRF       TRISA
;board.c,6 :: 		PORTA=0x00;
0x0079	0x1283      	BCF        STATUS, 5
0x007A	0x0185      	CLRF       PORTA
;board.c,7 :: 		PORTC=0x00;
0x007B	0x0187      	CLRF       PORTC
;board.c,9 :: 		ANSEL=0b00000000;    // use ansel to change
0x007C	0x1683      	BSF        STATUS, 5
0x007D	0x0191      	CLRF       ANSEL
;board.c,10 :: 		SET_BIT(ANSEL,7) ;   // setting a bit as analogue  // this pin will not act as GPIO and acts like a analogue pin
0x007E	0x3080      	MOVLW      128
0x007F	0x0091      	MOVWF      ANSEL
;board.c,11 :: 		SET_BIT(TRISC,3) ;     // analogue pin is set to output before analog read
0x0080	0x1587      	BSF        TRISC, 3
;board.c,12 :: 		}
L_end_port_init:
0x0081	0x0008      	RETURN
; end of _port_init
_ADC_Read:
;__Lib_ADC_A_B.c,49 :: 		
;__Lib_ADC_A_B.c,51 :: 		
0x0082	0x30C3      	MOVLW      195
0x0083	0x1283      	BCF        STATUS, 5
0x0084	0x059F      	ANDWF      ADCON0, 1
;__Lib_ADC_A_B.c,55 :: 		
0x0085	0x3040      	MOVLW      64
0x0086	0x059F      	ANDWF      ADCON0, 1
;__Lib_ADC_A_B.c,56 :: 		
0x0087	0x30F0      	MOVLW      240
0x0088	0x1683      	BSF        STATUS, 5
0x0089	0x049F      	IORWF      ADCON1, 1
;__Lib_ADC_A_B.c,57 :: 		
0x008A	0x1283      	BCF        STATUS, 5
0x008B	0x179F      	BSF        ADCON0, 7
;__Lib_ADC_A_B.c,58 :: 		
0x008C	0x082D      	MOVF       FARG_ADC_Read_channel, 0
0x008D	0x00D0      	MOVWF      R0
0x008E	0x0DD0      	RLF        R0, 1
0x008F	0x1050      	BCF        R0, 0
0x0090	0x0DD0      	RLF        R0, 1
0x0091	0x1050      	BCF        R0, 0
0x0092	0x0850      	MOVF       R0, 0
0x0093	0x049F      	IORWF      ADCON0, 1
;__Lib_ADC_A_B.c,61 :: 		
0x0094	0x141F      	BSF        ADCON0, 0
;__Lib_ADC_A_B.c,64 :: 		
0x0095	0x2057      	CALL       _Delay_22us
;__Lib_ADC_A_B.c,67 :: 		
0x0096	0x149F      	BSF        ADCON0, 1
;__Lib_ADC_A_B.c,70 :: 		
L_ADC_Read2:
0x0097	0x1C9F      	BTFSS      ADCON0, 1
0x0098	0x289B      	GOTO       L_ADC_Read3
;__Lib_ADC_A_B.c,71 :: 		
0x0099	0x0000      	NOP
0x009A	0x2897      	GOTO       L_ADC_Read2
L_ADC_Read3:
;__Lib_ADC_A_B.c,74 :: 		
0x009B	0x101F      	BCF        ADCON0, 0
;__Lib_ADC_A_B.c,77 :: 		
0x009C	0x081E      	MOVF       ADRESH, 0
0x009D	0x00D1      	MOVWF      R0+1
0x009E	0x01D0      	CLRF       R0
0x009F	0x1683      	BSF        STATUS, 5
0x00A0	0x081E      	MOVF       ADRESL, 0
0x00A1	0x04D0      	IORWF      R0, 1
0x00A2	0x3000      	MOVLW      0
0x00A3	0x04D1      	IORWF      R0+1, 1
;__Lib_ADC_A_B.c,78 :: 		
L_end_ADC_Read:
0x00A4	0x0008      	RETURN
; end of _ADC_Read
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x00A5	0x2051      	CALL       _____DoICP
0x00A6	0x118A      	BCF        PCLATH, 3
0x00A7	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x00A8	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x00A9	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x00AA	0x0AAA      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x00AB	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x00AC	0x0AAB      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x00AD	0x03D0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x00AE	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x00AF	0x28A5      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x00B0	0x0008      	RETURN
; end of ___CC2DW
_ADC_Init:
;__Lib_ADC_A_B.c,8 :: 		
;__Lib_ADC_A_B.c,9 :: 		
0x00B1	0x30FF      	MOVLW      _ADC_Get_Sample
0x00B2	0x1283      	BCF        STATUS, 5
0x00B3	0x00A7      	MOVWF      _ADC_Get_Sample_Ptr
0x00B4	0x30FF      	MOVLW      hi_addr(_ADC_Get_Sample)
0x00B5	0x00A8      	MOVWF      _ADC_Get_Sample_Ptr+1
0x00B6	0x30FF      	MOVLW      FARG_ADC_Get_Sample_channel
0x00B7	0x00A9      	MOVWF      _ADC_Get_Sample_Ptr+2
0x00B8	0x30FF      	MOVLW      hi_addr(FARG_ADC_Get_Sample_channel)
;__Lib_ADC_A_B.c,11 :: 		
0x00B9	0x30C3      	MOVLW      195
0x00BA	0x059F      	ANDWF      ADCON0, 1
;__Lib_ADC_A_B.c,15 :: 		
0x00BB	0x3040      	MOVLW      64
0x00BC	0x059F      	ANDWF      ADCON0, 1
;__Lib_ADC_A_B.c,16 :: 		
0x00BD	0x30F0      	MOVLW      240
0x00BE	0x1683      	BSF        STATUS, 5
0x00BF	0x049F      	IORWF      ADCON1, 1
;__Lib_ADC_A_B.c,17 :: 		
0x00C0	0x1283      	BCF        STATUS, 5
0x00C1	0x179F      	BSF        ADCON0, 7
;__Lib_ADC_A_B.c,19 :: 		
0x00C2	0x141F      	BSF        ADCON0, 0
;__Lib_ADC_A_B.c,20 :: 		
L_end_ADC_Init:
0x00C3	0x0008      	RETURN
; end of _ADC_Init
_main:
0x00C4	0x2104      	CALL       260
;main.c,10 :: 		void main()
;main.c,13 :: 		InitTimer0();
0x00C5	0x206D      	CALL       _InitTimer0
;main.c,14 :: 		InitTimer1();
0x00C6	0x205E      	CALL       _InitTimer1
;main.c,15 :: 		Port_init();
0x00C7	0x2076      	CALL       _port_init
;main.c,16 :: 		Adc_init();
0x00C8	0x20B1      	CALL       _ADC_Init
;main.c,17 :: 		while(1)
L_main0:
;main.c,19 :: 		pulse_width =30;  // setting the pusle width here
0x00C9	0x301E      	MOVLW      30
0x00CA	0x00A1      	MOVWF      _pulse_width
0x00CB	0x3000      	MOVLW      0
0x00CC	0x00A2      	MOVWF      _pulse_width+1
;main.c,20 :: 		BLINK_CHK_PIN=~BLINK_CHK_PIN;     // blink check
0x00CD	0x3001      	MOVLW      1
0x00CE	0x0685      	XORWF      PORTA, 1
;main.c,21 :: 		delay_ms(100);
0x00CF	0x3002      	MOVLW      2
0x00D0	0x00DB      	MOVWF      R11
0x00D1	0x3004      	MOVLW      4
0x00D2	0x00DC      	MOVWF      R12
0x00D3	0x30BA      	MOVLW      186
0x00D4	0x00DD      	MOVWF      R13
L_main2:
0x00D5	0x0BDD      	DECFSZ     R13, 1
0x00D6	0x28D5      	GOTO       L_main2
0x00D7	0x0BDC      	DECFSZ     R12, 1
0x00D8	0x28D5      	GOTO       L_main2
0x00D9	0x0BDB      	DECFSZ     R11, 1
0x00DA	0x28D5      	GOTO       L_main2
0x00DB	0x0000      	NOP
;main.c,24 :: 		if(TEST_BIT(PORTA,3))       // using PORTA.f3 MCLR latched pin / this PIn cannot be used for output
0x00DC	0x1D85      	BTFSS      PORTA, 3
0x00DD	0x28E1      	GOTO       L_main3
0x00DE	0x3001      	MOVLW      1
0x00DF	0x00AC      	MOVWF      ?FLOC___mainT5
0x00E0	0x28E2      	GOTO       L_main4
L_main3:
0x00E1	0x01AC      	CLRF       ?FLOC___mainT5
L_main4:
0x00E2	0x082C      	MOVF       ?FLOC___mainT5, 0
0x00E3	0x1903      	BTFSC      STATUS, 2
0x00E4	0x28E7      	GOTO       L_main5
;main.c,26 :: 		SET_BIT(PORTA,1) ;
0x00E5	0x1485      	BSF        PORTA, 1
;main.c,27 :: 		}
0x00E6	0x28E8      	GOTO       L_main6
L_main5:
;main.c,30 :: 		CLEAR_BIT(PORTA,1) ;
0x00E7	0x1085      	BCF        PORTA, 1
;main.c,31 :: 		}
L_main6:
;main.c,33 :: 		if(ADC_Read(7) > 512)        // ADC cheeck
0x00E8	0x3007      	MOVLW      7
0x00E9	0x00AD      	MOVWF      FARG_ADC_Read_channel
0x00EA	0x2082      	CALL       _ADC_Read
0x00EB	0x0851      	MOVF       R0+1, 0
0x00EC	0x3C02      	SUBLW      2
0x00ED	0x1D03      	BTFSS      STATUS, 2
0x00EE	0x28F1      	GOTO       L__main10
0x00EF	0x0850      	MOVF       R0, 0
0x00F0	0x3C00      	SUBLW      0
L__main10:
0x00F1	0x1803      	BTFSC      STATUS, 0
0x00F2	0x28F6      	GOTO       L_main7
;main.c,35 :: 		SET_BIT(PORTA,4) ;
0x00F3	0x1283      	BCF        STATUS, 5
0x00F4	0x1605      	BSF        PORTA, 4
;main.c,36 :: 		}
0x00F5	0x28F8      	GOTO       L_main8
L_main7:
0x00F6	0x1283      	BCF        STATUS, 5
;main.c,39 :: 		CLEAR_BIT(PORTA,4) ;
0x00F7	0x1205      	BCF        PORTA, 4
;main.c,40 :: 		}
L_main8:
;main.c,44 :: 		}
0x00F8	0x28C9      	GOTO       L_main0
;main.c,45 :: 		}
L_end_main:
0x00F9	0x28F9      	GOTO       $+0
; end of _main
0x0104	0x3021      	MOVLW      33
0x0105	0x0084      	MOVWF      FSR
0x0106	0x3004      	MOVLW      4
0x0107	0x1283      	BCF        STATUS, 5
0x0108	0x00D0      	MOVWF      R0
0x0109	0x30FF      	MOVLW      255
0x010A	0x00AA      	MOVWF      ___DoICPAddr
0x010B	0x3000      	MOVLW      0
0x010C	0x00AB      	MOVWF      43
0x010D	0x20A5      	CALL       165
0x010E	0x0008      	RETURN
;interrupt.c,0 :: ?ICS_pulse_width
0x00FF	0x344B ;?ICS_pulse_width+0
0x0100	0x3400 ;?ICS_pulse_width+1
; end of ?ICS_pulse_width
;interrupt.c,0 :: ?ICS_i
0x0101	0x3400 ;?ICS_i+0
0x0102	0x3400 ;?ICS_i+1
; end of ?ICS_i
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [77]    _Interrupt
0x0051       [6]    _____DoICP
0x0057       [7]    _Delay_22us
0x005E      [15]    _InitTimer1
0x006D       [9]    _InitTimer0
0x0076      [12]    _port_init
0x0082      [35]    _ADC_Read
0x00A5      [12]    ___CC2DW
0x00B1      [19]    _ADC_Init
0x00C4      [53]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [1]    PORTA
0x0007       [1]    PORTC
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000B       [0]    TMR0IF_bit
0x000C       [0]    TMR1IF_bit
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [0]    TMR1ON_bit
0x0010       [1]    T1CON
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0021       [2]    _pulse_width
0x0023       [2]    _i
0x0025       [1]    ___saveSTATUS
0x0026       [1]    ___savePCLATH
0x0027       [3]    _ADC_Get_Sample_Ptr
0x002A       [2]    ___DoICPAddr
0x002C       [1]    ?FLOC___mainT5
0x002D       [1]    FARG_ADC_Read_channel
0x0050       [1]    R0
0x0051       [1]    R1
0x0052       [1]    R2
0x0053       [1]    R3
0x0054       [1]    R4
0x0055       [1]    R5
0x0056       [1]    R6
0x0057       [1]    R7
0x0058       [1]    R8
0x0059       [1]    R9
0x005A       [1]    R10
0x005B       [1]    R11
0x005C       [1]    R12
0x005D       [1]    R13
0x005E       [1]    R14
0x005F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISA
0x0087       [1]    TRISC
0x008C       [0]    TMR1IE_bit
0x0091       [1]    ANSEL
0x009E       [1]    ADRESL
0x009F       [1]    ADCON1
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x00FF       [2]    ?ICS_pulse_width
0x0101       [2]    ?ICS_i
